{
  "id": "",
  "title": "Intro",
  "description: [
    "",
    "<dfn>CSS Grid</dfn> helps you easily build complex web designs. It works by turning an HTML element into a grid container with rows and columns for you to place children elements where you want within the grid.",
    ""
  ],
  "challengeSeed": [],
  "tests": [],
  "solutions": [],
  "hints": [],
  "type": "",
  "releasedOn": "",
  "challengeType": 0,
  "translations": {}
},
{
  "id": "",
  "title": "Create your first CSS Grid",
  "description": [
    "Turn any HTML element into a grid container by setting its <code>display</code> property to <code>grid</code>. This gives you the ability to use all the other properties associated with CSS Grid.",
    "<strong>Note</strong><br>In CSS Grid, the parent element is referred to as <code>container</code> and its children are called <code>items</code>.",
    "<hr>",
    "Change the display of the div with the <code>container</code> class to <code>grid</code>."
  ],
  "challengeSeed": [],
  "tests": [],
  "solutions": [],
  "hints": [],
  "type": "",
  "releasedOn": "",
  "challengeType": 0,
  "translations": {}
},
{
  "id": "",
  "title": Add columns with grid-template-columns",
  "description": [
    "Simply creating a grid element doesn't get you very far. You need to define the structure of the grid, as well. To add some columns to the grid, use the <code>grid-template-columns</code> property on a grid container, as demonstrated below:",
    "<blockquote>.container {<br>display: grid;<br>grid-template-columns: 50px 50px;<br>}</blockquote>",
    "This will give your grid two columns that are 50px wide each.",
    "The number of parameters given to the <code>grid-template-columns</code> property indicates the number of columns in the grid, and the value of each parameter indicates the width of each column.",
    "<hr>",
    "Give the grid container three columns that are 100px wide each."
  ],
  "challengeSeed": [],
  "tests": [],
  "solutions": [],
  "hints": [],
  "type": "",
  "releasedOn": "",
  "challengeType": 0,
  "translations": {}
},
{
  "id": "",
  "title": "Add rows with grid-template-rows",
  "description": [
    "The grid you created in the last challenge will set the number of rows automatically to 1. To adjust the rows manually, use the <code>grid-template-rows</code> property in the same way you used <code>grid-template-columns</code> in previous challenge.",
    "<hr>",
    "Add four rows to the grid that are 50px tall each."
  ],
  "challengeSeed": [],
  "tests": [],
  "solutions": [],
  "hints": [],
  "type": "",
  "releasedOn": "",
  "challengeType": 0,
  "translations": {}
},
{
  "id": "",
  "title": "Use CSS Grid units to change the size of columns and rows",
  "description": [
    "You can use absolute and relative units like <code>px</code> and <code>em</code> in CSS Grid to define the size of rows and columns. You can use these as well:",
    "<code>fr</code>: sets the column or row to a fraction of the available space,",
    "<code>auto</code>: sets the column or row to the width or height of its content automatically,",
    "<code>%</code>: adjusts the column or row to the percent width of its container.",
    "Here's the code that generates the output in the preview:",
    "<blockquote>grid-template-columns: auto 10px 5% 2fr 1fr;</blockquote>",
    "This snippet creates five columns. The first column is as wide as its content, the second column is 10px, the third column is 5% of its container, and for the last two columns; the remaining space is divided into three sections, two are allocated for the fourth column, and one for the fifth.",
    "<hr>",
    "Make a grid with three rows whose heights are as follows: 1fr, 100px, and 2fr."
  ],
  "challengeSeed": [],
  "tests": [],
  "solutions": [],
  "hints": [],
  "type": "",
  "releasedOn": "",
  "challengeType": 0,
  "translations": {}
},
{
  "id": "",
  "title": "Create a column gap using grid-column-gap",
  "description": [
    "So far in the grids you have created, the columns have all been tight up against each other. Sometimes you want a margin in between the columns. In CSS Grid you call this a <dfn>gap</dfn>. To add a gap between the columns, use the <code>grid-column-gap</code> property like this:",
    "<blockquote>grid-column-gap: 10px;</blockquote>",
    "This creates 10px of empty space between all of our columns.",
    "<hr>",
    "Give the columns in the grid a 20px gap."
  ],
  "challengeSeed": [],
  "tests": [],
  "solutions": [],
  "hints": [],
  "type": "",
  "releasedOn": "",
  "challengeType": 0,
  "translations": {}
},
{
  "id": "",
  "title": "Create a row gap using grid-row-gap",
  "description": [
    "You can add a gap in between the rows of a grid using <code>grid-row-gap</code> in the same way that you added a gap in between columns in the previous challenge.",
    "<hr>",
    "Create a gap for the rows that is 5% of the grid's width."
  ],
  "challengeSeed": [],
  "tests": [],
  "solutions": [],
  "hints": [],
  "type": "",
  "releasedOn": "",
  "challengeType": 0,
  "translations": {}
},
{
  "id": "",
  "title": "Add gaps faster with grid-gap",
  "description": [
    "<code>grid-gap</code> is a shorthand property for <code>grid-row-gap</code> and <code>grid-column-gap</code> from the previous two challenges, that's more convenient to use. If <code>grid-gap</code> has one value, it will a create a gap between all rows and columns. However, if there are two values, it will use the first one to set the gap between the rows and the second value for the columns.",
    "<hr>",
    "Use <code>grid-gap</code> to introduce a 5% gap between the rows and 20px gap between the columns."
  ],
  "challengeSeed": [],
  "tests": [],
  "solutions": [],
  "hints": [],
  "type": "",
  "releasedOn": "",
  "challengeType": 0,
  "translations": {}
},
{
  "id": "",
  "title": "Use grid-column to control spacing",
  "description": [
    "Up to this point, all the properties that have been discussed are for grid containers. The <code>grid-column</code> property is the first one for use on the grid items themselves.",
    "The hypothetical horizontal and vertical lines that create the grid are referred to as <dfn>lines</dfn>. These lines are numbered starting with 1 at the top left corner of the grid and move right for columns and down for rows, counting upward.",
    "To control the amount of columns an item will consume, you can use the <code>grid-column</code> property in conjunction with the line numbers you want the item to start and stop at.",
    "Here's an example:",
    "<blockquote>grid-column: 1 / 3;</blockquote>",
    "This will make the item start at the first vertical line of the grid on the left and span to the 3rd line of the grid, consuming two columns.",
    "<hr>",
    "In the editor pane, make the item with the class <code>item1</code> consume the last two columns of the grid."
  ],
  "challengeSeed": [],
  "tests": [],
  "solutions": [],
  "hints": [],
  "type": "",
  "releasedOn": "",
  "challengeType": 0,
  "translations": {}
},
{
  "id": "",
  "title": "Use grid-row to control spacing",
  "description": [
    "Of course, you can make items consume multiple rows just like you can with columns. You define the horizontal lines you want an item to start and stop at using the <code>grid-row</code> property on a grid item.",
    "<hr>",
    "Make the element with the <code>item2</code> class consume the first two rows."
  ],
  "challengeSeed": [],
  "tests": [],
  "solutions": [],
  "hints": [],
  "type": "",
  "releasedOn": "",
  "challengeType": 0,
  "translations": {}
},
{
  "id": "",
  "title": "Align an item horizontally using justify-self",
  "description": [
    "In CSS Grid, the content of each child element is located in a box which is referred to as a <dfn>cell</dfn>. You can align the content's position within its cell horizontally using the <code>justify-self</code> property on a grid item. By default, this property has a value of <code>stetch</code>, which will make the content fill the whole width of the cell. This CSS Grid property accepts other values as well:",
    "<code>start</code>: aligns the content at the left of the cell,",
    "<code>center</code>: aligns the content in the center of the cell,",
    "<code>end</code>: aligns the content at the right of the cell.",
    "<hr>",
    "Change the <code>justify-self</code> property to center the item with the class <code>item2</code>. The item has a border so you can better see how the item behaves."
  ],
  "challengeSeed": [],
  "tests": [],
  "solutions": [],
  "hints": [],
  "type": "",
  "releasedOn": "",
  "challengeType": 0,
  "translations": {}
},
{
  "id": "",
  "title": "Align an item vertically using align-self",
  "description": [
    "Just as you can align an item horizontally, there's a way to align an item vertically as well. To do this, you will use the <code>align-self</code> property on an item. This property accepts all of the same values as <code>justify-self</code> from the last challenge.",
    "<hr>",
    "Align the item with the class <code>item3</code> vertically at the bottom."
  ],
  "challengeSeed": [],
  "tests": [],
  "solutions": [],
  "hints": [],
  "type": "",
  "releasedOn": "",
  "challengeType": 0,
  "translations": {}
},
{
  "id": "",
  "title": "Align all items using justify-items",
  "description": [
    "Sometimes you want all the items in your CSS Grid to share the same alignment. You can use the previously learned properties and align them individually, or you can align them all at once horizontally by using <code>justify-items</code> on your grid container. This property can accept all the same values you learned about in the previous two challenges, the difference being that it will move all the items in our grid to the desired alignment.",
    "<hr>",
    "Use this property to center all our items horizontally."
  ],
  "challengeSeed": [],
  "tests": [],
  "solutions": [],
  "hints": [],
  "type": "",
  "releasedOn": "",
  "challengeType": 0,
  "translations": {}
},
{
  "id": "",
  "title": "Align all items using align-items",
  "description": [
    "Using the <code>align-items</code> property on a grid container will set the vertical alignment for all the items in our grid.",
    "<hr>",
    "Use it now to move all the items to the bottom of each cell."
  ],
  "challengeSeed": [],
  "tests": [],
  "solutions": [],
  "hints": [],
  "type": "",
  "releasedOn": "",
  "challengeType": 0,
  "translations": {}
},
{
  "id": "",
  "title": "Divide the grid into an area template",
  "description": [
    "To remove the complexities from the grid, you can group cells into an <dfn>area</dfn> and give it a custom name. Do this by using <code>grid-template-areas</code> on the container like this:",
    "<blockquote>grid-template-areas: \"header header header\"<br>\"advert content content\"<br>\"footer footer footer\";</blockquote>",
    "You can reference those names later to apply other properties. The code above names the top area <code>header</code>, the bottom area <code>footer</code>, and makes two areas in the middle row; <code>advert</code> and <code>content</code>.",
    "<strong>Note</strong><br>Every word represents a cell and every pair of quotation marks represent a row.",
    "In addition to custom labels, you can use a period (<code>.</code>) to designate an empty cell in the grid.",
    "<hr>",
    "Change the area template so that the cell labeled <code>advert</code> becomes an empty cell."
  ],
  "challengeSeed": [],
  "tests": [],
  "solutions": [],
  "hints": [],
  "type": "",
  "releasedOn": "",
  "challengeType": 0,
  "translations": {}
},
{
  "id": "",
  "title": "Place items in grid areas using the grid-area property",
  "description": [
    "After creating an areas template for your grid container, as shown in the previous challenge, you need a way to tell the grid what items to put in those areas. To do this, you use the <code>grid-area</code> property on an item like this:",
    "<blockquote>.item1 { grid-area: header };</blockquote>",
    "This lets the grid know that you want the <code>item1</code> class to go in the area named <code>header</code>. In this case, the item will use the entire top row because that whole row is set as the header area.",
    "<hr>",
    "Add an item in the footer area and give it a <code>lime</code> <code>background-color</code>.
  ],
  "challengeSeed": [],
  "tests": [],
  "solutions": [],
  "hints": [],
  "type": "",
  "releasedOn": "",
  "challengeType": 0,
  "translations": {}
},
{
  "id": "", 
  "title": "Use grid-area without creating an areas template",
  "description": [
    "The <code>grid-area</code> property you learned in the last challenge can be used in another way. If your grid doesn't have an areas template to reference, we can create an area on the fly for our item to be placed:",
    "<blockquote>item1 { grid-area: 1/1/2/4; }</blockquote>",
    "This is using the line numbers we learned about earlier to define where the area for this item will be. The numbers in the example above represent these values:",
    "<blockquote>grid-area: row to start at / column to start at / row to end at / column to end at;</blockquote>",
    "So the area in the example will consume the rows between lines 1 and 2, and the columns between lines 1 and 4.",
    "<hr>".
    "Modify the <code>grid-area</code> property so the <code>content</code> consumes the last two columns in the middle row."
  ],
  "challengeSeed": [],
  "tests": [],
  "solutions": [],
  "hints": [],
  "type": "",
  "releasedOn": "",
  "challengeType": 0,
  "translations": {}
},
{
  "id": "",
  "title": "Reduce repetition using the repeat function",
  "description": [
    "When you used <code>grid-template-columns</code> and <code>grid-template-rows</code> to define the structure of a grid, you entered a value for each row or column you created.",
    "Lets say you want a grid with 100 rows of the same height. It isn't very practical to insert 100 values individually.  Fortunately, there's a better way - by using the <code>repeat</code> function to specify the number of times you would your column or row to be repeated, followed by a comma and the value you want to repeat.",
    "Here's an example that would create the 100 row grid, each at 50px tall.",
    "<blockquote>grid-template-rows: repeat(100, 50px);</blockquote>",
    "You can also repeat multiple values with the repeat function, and insert the function amongst other values when defining a grid structure. Here's what I mean:",
    "<blockquote>grid-template-columns: repeat(2, 1fr 50px) 20px;</blockquote>",
    "This translates to:",
    "<blockquote>grid-template-columns: 1fr 50px 1fr 50px 20px;</blockquote>",
    "<strong>Note</strong><br><code>1fr 50px</code> is repeated twice followed by 20px.",
    "<hr>",
    "Use <code>repeat</code> to remove repetition from the <code>grid-template-columns</code> property."
  ],
  "challengeSeed": [],
  "tests": [],
  "solutions": [],
  "hints": [],
  "type": "",
  "releasedOn": "",
  "challengeType": 0,
  "translations": {}
},
{
  "id": "",
  "title": "Limit item size using the minmax function",
  "description": [
    "There's another built-in function to use with <code>grid-template-columns</code> and <code>grid-template-rows</code> called <code>minmax</code>. It's used to limit the size of our items when the grid container changes size. To do this you need to specify the acceptable size range for your item. Here is an example:",
    "<blockquote>grid-template-columns: 100px minmax(50px, 200px);</blockquote>",
    "In the code above, <code>grid-template-columns</code> is set to create three columns; the first is 100px wide, and the second has the minimum width of 50px and the maximum width of 200px.",
    "<hr>",
    "Using <code>minmax</code> function, add a column that has the minimum size of 15px and the maximum size of 2fr",
  ],
  "challengeSeed": [],
  "tests": [],
  "solutions": [],
  "hints": [],
  "type": "",
  "releasedOn": "",
  "challengeType": 0,
  "translations": {}
},
{
  "id": "",
  "title": "Create flexible layouts using auto-fill",
  "description": [
    "The repeat function comes with something called <dfn>auto-fill</dfn>, which allows you to automatically insert as many tracks of your desired size as possible depending on the size of the container. You can create flexible layouts when combining <code>auto-fill</code> with <code>minmax</code>. Resize preview panel to see it in action.",
    "In the preview, <code>grid-template-columns</code> is set to",
    "<blockquote>repeat(auto-fill, minmax(50px, 1fr));</blockquote>", 
    "When the container changes size, this setup keeps inserting 50px columns and stretching them until it can insert another one.",
    "<strong>Note</strong><br>If your container can't fit all your items on one row, it will move them down to a new one.",
    "<hr>",
    "In the second grid, use <code>auto-fill</code> with <code>repeat</code> to fill the grid with columns that have a minimum width of 60px and maximum of 1fr.",
  ],
  "challengeSeed": [],
  "tests": [],
  "solutions": [],
  "hints": [],
  "type": "",
  "releasedOn": "",
  "challengeType": 0,
  "translations": {}
},
{
  "id": "",
  "title": "Create flexible layouts using auto-fit",
  "description": [
    "<code>auto-fit</code> works almost identical to <code>auto-fill</code>. The only difference is that when the container's size exceeds the size of all the items combined, <code>auto-fill</code> keeps inserting empty row or columns and pushes your items to the side, while <code>auto-fit</code> collapses those empty rows or columns and stretches your items to fit the size of the container.",
    "See the difference between two in the preview",
    "<strong>Note</strong><br>If your container can't fit all your items on one row, it will move them down to a new one.",
    "<hr>",
    "In the second grid, use <code>auto-fit</code> with <code>repeat</code> to fill the grid with columns that have a minimum width of 60px and maximum of 1fr"
  ],
  "challengeSeed": [],
  "tests": [],
  "solutions": [],
  "hints": [],
  "type": "",
  "releasedOn": "",
  "challengeType": 0,
  "translations": {}
},
{
  "id": "",
  "title": "Use media queries to create responsive layouts",
  "description": [
    "CSS Grid can be an easy way to make your site more responsive by using media queries to rearrange grid areas, change dimensions of a grid, and rearrange the placement of items to make your design more flexible.",
    "In the preview, when the viewport width is 700px or less, the number of columns changes from 2 to 3. The advertisement area then occupies the top row, and the div with the class <code>item3</code> moves to the top corner of the grid.",
    "<hr>",
    "Add a media query so that whenever the viewport width is 300px or less, the number of columns changes to one, and the advertisement area moves to the second row."
  ],
  "challengeSeed": [],
  "tests": [],
  "solutions": [],
  "hints": [],
  "type": "",
  "releasedOn": "",
  "challengeType": 0,
  "translations": {}
},
{
  "id": "",
  "title": "Create grids within grids",
  "description": [
    "Turning an element into a grid only affects the behavior of its direct descendants. So by turning a direct descendant into a grid, you then have a grid within a grid.",
    "As you can see in the preview, setting the <code>display</code> and <code>grid-template-columns</code> properties of the element with the <code>item3</code> class, you can have a grid that contains another grid.
    "<hr>",
    "Turn the element with the <code>item4</code> class into a grid with two columns at 1fr width each."
  ],
  "challengeSeed": [],
  "tests": [],
  "solutions": [],
  "hints": [],
  "type": "",
  "releasedOn": "",
  "challengeType": 0,
  "translations": {}
}
